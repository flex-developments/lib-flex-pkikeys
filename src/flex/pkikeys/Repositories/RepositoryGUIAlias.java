/*
 * lib-flex-pkikeys
 *
 * Copyright (C) 2010
 * Ing. Felix D. Lopez M. - flex.developments@gmail.com
 * 
 * Desarrollo apoyado por la Superintendencia de Servicios de Certificación 
 * Electrónica (SUSCERTE) durante 2010-2014 por:
 * Ing. Felix D. Lopez M. - flex.developments@gmail.com | flopez@suscerte.gob.ve
 * Ing. Yessica De Ascencao - yessicadeascencao@gmail.com | ydeascencao@suscerte.gob.ve
 *
 * Este programa es software libre; Usted puede usarlo bajo los terminos de la
 * licencia de software GPL version 2.0 de la Free Software Foundation.
 *
 * Este programa se distribuye con la esperanza de que sea util, pero SIN
 * NINGUNA GARANTIA; tampoco las implicitas garantias de MERCANTILIDAD o
 * ADECUACION A UN PROPOSITO PARTICULAR.
 * Consulte la licencia GPL para mas detalles. Usted debe recibir una copia
 * de la GPL junto con este programa; si no, escriba a la Free Software
 * Foundation Inc. 51 Franklin Street,5 Piso, Boston, MA 02110-1301, USA.
 */

package flex.pkikeys.Repositories;

import flex.pkikeys.PKIKeysLogger;
import flex.pkikeys.exceptions.PKIKeysException;
import flex.pkikeys.exceptions.PKIKeysQuitWinException;
import flex.pkikeys.i18n.I18n;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 * RepositoryGUIAlias
 * 
 * @author Ing. Felix D. Lopez M. - flex.developments@gmail.com
 * @author Ing. Yessica De Ascencao - yessicadeascencao@gmail.com
 */
public class RepositoryGUIAlias extends javax.swing.JFrame {
    private ImageIcon image;
    
    /**
     * Creates new form RepositorioTypeGUI
     * @param aliases
     */
    public RepositoryGUIAlias(Enumeration<String> aliases) {
        try {
            InputStream imgIS = flex.pkikeys.Repositories.AbstractRepository.class.getResourceAsStream("llaves.png");
            image = new ImageIcon(ImageIO.read(imgIS));
            initComponents();

            //Llenar combo
            cmbAliases.removeAllItems();
            while (aliases.hasMoreElements()) cmbAliases.addItem((String) aliases.nextElement());
            
        } catch (IOException ex) {
            PKIKeysLogger.writeErrorLog(ex);
        }
    }
    
    public String getSelectedAlias() {
        return cmbAliases.getSelectedItem().toString();
    }
    
    private int showModalWin() {
        return JOptionPane.showOptionDialog(
              null,
              this.getContentPane(),
              this.getTitle(),
              JOptionPane.OK_CANCEL_OPTION,
              JOptionPane.DEFAULT_OPTION,
              null,
              null,
              null);
    }

    public void getAlias() throws PKIKeysException {
        switch (showModalWin()) {
            case JOptionPane.OK_OPTION: { //Aceptar
                break;
            }

            default: { //Salir
                throw new PKIKeysException(new PKIKeysQuitWinException());
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbAliases = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        Limagen = new javax.swing.JLabel(image);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(I18n.get(I18n.I_REPOSITORY_GUI_TITLE));

        cmbAliases.setModel(new javax.swing.DefaultComboBoxModel());
        cmbAliases.setName(""); // NOI18N

        jLabel1.setText(I18n.get("I_KEY_ALIAS_L_CENTRAL"));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        Limagen.setText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Limagen, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbAliases, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAliases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
            .addComponent(Limagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Limagen;
    private javax.swing.JComboBox cmbAliases;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
