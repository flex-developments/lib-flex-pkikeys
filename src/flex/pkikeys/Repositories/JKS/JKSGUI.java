/*
 * lib-flex-pkikeys
 *
 * Copyright (C) 2010
 * Ing. Felix D. Lopez M. - flex.developments en gmail
 * 
 * Desarrollo apoyado por la Superintendencia de Servicios de Certificación 
 * Electrónica (SUSCERTE) durante 2010-2014 por:
 * Ing. Felix D. Lopez M. - flex.developments en gmail | flopez en suscerte gob ve
 * Ing. Yessica De Ascencao - yessicadeascencao en gmail | ydeascencao en suscerte gob ve
 *
 * Este programa es software libre; Usted puede usarlo bajo los terminos de la
 * licencia de software GPL version 2.0 de la Free Software Foundation.
 *
 * Este programa se distribuye con la esperanza de que sea util, pero SIN
 * NINGUNA GARANTIA; tampoco las implicitas garantias de MERCANTILIDAD o
 * ADECUACION A UN PROPOSITO PARTICULAR.
 * Consulte la licencia GPL para mas detalles. Usted debe recibir una copia
 * de la GPL junto con este programa; si no, escriba a la Free Software
 * Foundation Inc. 51 Franklin Street,5 Piso, Boston, MA 02110-1301, USA.
 */

package flex.pkikeys.Repositories.JKS;

import flex.pkikeys.Repositories.JKS.resources.JKSStringsBundle;
import flex.pkikeys.PKIKeysLogger;
import flex.pkikeys.exceptions.ChangeRepositoryTypeException;
import flex.pkikeys.exceptions.PKIKeysException;
import flex.pkikeys.exceptions.PKIKeysQuitWinException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 * JKSGUI
 * 
 * Clase que permite capturar la ruta donde se ubica el archivo JKS del que se
 * cargarán las llaves y su respectiva contraseña desde una interfáz gráfica basada
 * en Swing.
 * 
 * @author Ing. Felix D. Lopez M. - flex.developments en gmail
 * @author Ing. Yessica De Ascencao - yessicadeascencao en gmail
 */
public final class JKSGUI extends javax.swing.JFrame {
    
    private ImageIcon image;
    
    FileFilter filter = new FileFilter() {
        
        @Override
        public boolean accept(File file) {
            if (file.isDirectory()) return true;
            String name = file.getName().toLowerCase();
            return name.endsWith(".jks");
        }

        @Override
        public String getDescription() {
            return JKSStringsBundle.get(JKSStringsBundle.I_JKS_FILTER_DESCRIPTION);
        }
    };
    
    /**
     * Constructor único que inicializa la interfáz gráfica y sus componentes.
     * @param path
     */
    public JKSGUI(String path) {
        try {
            InputStream imgIS = flex.pkikeys.Repositories.AbstractRepository.class.getResourceAsStream("llaves.png");
            image = new ImageIcon(ImageIO.read(imgIS));
            initComponents();
            setLocationRelativeTo(null);
            setPath(path);
            
        } catch (IOException ex) {
        PKIKeysLogger.writeErrorLog(ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        finder = new javax.swing.JFileChooser();
        lblImage = new javax.swing.JLabel(image);
        lblPath = new javax.swing.JLabel();
        txtPath = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        lblPass = new javax.swing.JLabel();
        txtPass = new javax.swing.JPasswordField();

        finder.setFileFilter(filter);
        finder.setToolTipText(JKSStringsBundle.get("I_JKS_FILTER_TT"));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(JKSStringsBundle.get("I_JKS_TITLE"));
        setBackground(new java.awt.Color(254, 254, 254));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblImage.setText("");

        lblPath.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        lblPath.setText(JKSStringsBundle.get("I_JKS_L_PATH"));

        txtPath.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        txtPath.setText(System.getProperty("user.home"));
        txtPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPathActionPerformed(evt);
            }
        });

        btnFind.setText("...");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        lblPass.setFont(new java.awt.Font("DejaVu Sans", 1, 13)); // NOI18N
        lblPass.setText(JKSStringsBundle.get("I_JKS_L_PASS"));

        txtPass.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        txtPass.setToolTipText(JKSStringsBundle.get("I_JKS_TT_PASS"));
        txtPass.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPassActionPerformed(evt);
            }
        });
        txtPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPassKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPath)
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPass)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPath)
                    .addComponent(lblPass))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    }//GEN-LAST:event_formWindowOpened

    private void txtPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPathActionPerformed
}//GEN-LAST:event_txtPathActionPerformed
    
    /**
     * Se presiona el botón "Aceptar".
     *
     * @param Evento en el que se presiona el botón "Aceptar".
     */
    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        // TODO add your handling code here:
        if (finder.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String selected = finder.getSelectedFile().getAbsolutePath();
            setPath(selected);
            txtPass.requestFocus();
        }
}//GEN-LAST:event_btnFindActionPerformed

    private void txtPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPassActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtPassActionPerformed

    private void txtPassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPassKeyPressed
        if(evt.getKeyCode()==10) {
            this.dispose();
        }
}//GEN-LAST:event_txtPassKeyPressed
    
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFind;
    private javax.swing.JFileChooser finder;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblPass;
    private javax.swing.JLabel lblPath;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtPath;
    // End of variables declaration//GEN-END:variables

    /**
     * Obtener Contraseña.
     * 
     * @return Retorna un String con la txtContraseña indicada en el texto.
     */
    public String getPassword() {
        return new String(txtPass.getPassword());
    }

    /**
     * Obtener Ruta.
     *
     * @return Retorna un String con la txtRuta de ubicación del archivo JKS del 
     * que se cargarán las llaves.
     */
    public String getPath() {
        return txtPath.getText();
    }
    
    public void setPath(String path) {
        if(path!=null) this.txtPath.setText(path);
    }

    /**
     * Métido para mostrar un diálogo de error con el mensaje indicado.
     *
     * @param message que se desea mostrar en el cuadro de diálogo.
     */
    public void errorMessage(String message) {
        JOptionPane.showOptionDialog(null,
                message,
                this.getTitle() + JKSStringsBundle.get(JKSStringsBundle.I_JKS_TITLE_SUFIX_ERROR),
                JOptionPane.DEFAULT_OPTION,
                JOptionPane.ERROR_MESSAGE,
                null,
                null,
                null
        );
        txtPass.requestFocus();
    }

    private int showModalWin() {
        return JOptionPane.showOptionDialog(null,
              this.getContentPane(),
              this.getTitle(),
              JOptionPane.OK_CANCEL_OPTION,
              JOptionPane.DEFAULT_OPTION,
              null,
              new Object[] {
                  JKSStringsBundle.get(JKSStringsBundle.I_JKS_B_ACCEPT), 
                  JKSStringsBundle.get(JKSStringsBundle.I_JKS_B_CANCEL), 
                  JKSStringsBundle.get(JKSStringsBundle.I_JKS_B_CHANGE) 
              },
              null);
    }

    public void getConfiguration() throws PKIKeysException, ChangeRepositoryTypeException {
        try {
            switch (showModalWin()) {
                case JOptionPane.OK_OPTION: { //Aceptar
                    File f = new File(getPath());
                    if (!f.exists() || f.isDirectory()) {
                        errorMessage(JKSStringsBundle.get(JKSStringsBundle.M_ERROR_JKS_NO_PATH));
                        txtPath.requestFocus();
                        throw new JKSException(null);

                    } else if(getPassword().isEmpty()) {
                        errorMessage(JKSStringsBundle.get(JKSStringsBundle.M_ERROR_JKS_EMPTY_PASS));
                        txtPass.requestFocus();
                        throw new JKSException(null);

                    }
                    break;
                }

                case 2: { //Volver
                    throw new ChangeRepositoryTypeException();
                }

                default: { //Cancelar
                    throw new PKIKeysException(new PKIKeysQuitWinException());
                }
            }
            
        } catch (JKSException ex) {
            getConfiguration();
        }
    }
}
